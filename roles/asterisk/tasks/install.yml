---
# Install Asterisk

- name: install kernell headers
  shell: 'yum install -y "kernel-devel-$(uname -r)"'
  register: ps
- debug: var=ps.stdout_lines

- name: install build dependencies
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - make
    - wget
    - openssl-devel
    - ncurses-devel
    - newt-devel
    - libxml2-devel
    - gcc
    - gcc-c++
    - sqlite-devel
    - libuuid-devel
    - bzip2
    - jansson-devel

- name: add user {{ asterisk_user }}
  user:
    name: "{{ asterisk_user }}"
    shell: /bin/bash
    groups:
      - systemd-journal

- stat:
    path: "{{ src_dir }}"
  register: prev
  tags: uninstall

- name: remove previous installation
  shell: |
    cd {{ src_dir }}
    for d in * ; do
      if [ -d "$d" ]; then
        echo -e "\nrunning 'make uninstall' at: $d"
        pushd "$d"
          make uninstall
        popd
      fi
    done
  register: ps
  when: prev.stat.isdir is defined and prev.stat.isdir
  tags: uninstall

- debug: var=ps.stdout_lines
  tags: uninstall

- name: remove existing src dir
  file: "path={{ src_dir }} state=absent"

- name: create src directory structure
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ asterisk_user }}"
    group: "{{ asterisk_user }}"
    mode: 0775
    recurse: yes
  with_items:
    - "{{ src_dir }}"

- name: download asterisk dahdi {{ src.version.dahdi }} sources
  unarchive:
    src: "{{ src.url }}/dahdi-linux-complete/dahdi-linux-complete-{{ src.version.dahdi }}.tar.gz"
    dest: "{{ src_dir }}"
    remote_src: yes
  when: not skip_dahdi

- name: download asterisk libpri {{ src.version.libpri }} sources
  unarchive:
    src: "{{ src.url }}/libpri/releases/libpri-{{ src.version.libpri }}.tar.gz"
    dest: "{{ src_dir }}"
    remote_src: yes
  when: not skip_libpri

- name: download asterisk {{ src.version.asterisk }} sources
  unarchive:
    src: "{{ src.url }}/asterisk/releases/asterisk-{{ src.version.asterisk }}.tar.gz"
    dest: "{{ src_dir }}"
    remote_src: yes

# install dahdi. should be installed before libpri.
- name: make dahdi {{ src.version.dahdi }}
  command: "make chdir={{ src_dir }}/dahdi-linux-complete-{{ src.version.dahdi }}"
  when: not skip_dahdi

- name: make install dahdi {{ src.version.dahdi }}
  command: make install
  args:
    chdir: "{{ src_dir }}/dahdi-linux-complete-{{ src.version.dahdi }}"
  when: not skip_dahdi

- name: make config dahdi {{ src.version.dahdi }}
  command: make config
  args:
    chdir: "{{ src_dir }}/dahdi-linux-complete-{{ src.version.dahdi }}"
  when: not skip_dahdi

# install pri
- name: make libpri {{ src.version.libpri }}
  command: "make chdir={{ src_dir }}/libpri-{{ src.version.libpri }}"
  when: not skip_libpri

- name: make install libpri {{ src.version.libpri }}
  command: make install
  args:
    chdir: "{{ src_dir }}/libpri-{{ src.version.libpri }}"
  when: not skip_libpri

# install asterisk
- name: make configure for asterisk {{ src.version.asterisk }}
  command: ./configure --libdir=/usr/lib64 CC="gcc -O3" CFLAGS=-O3
  args:
    chdir: "{{ src_dir }}/asterisk-{{ src.version.asterisk }}"

- name: make configure menuselect for asterisk
  shell: "{{ item }} chdir={{ src_dir }}/asterisk-{{ src.version.asterisk }}"
  with_items:
   - rm menuselect.makeopts || true
   - make menuselect.makeopts
   - menuselect/menuselect --disable BUILD_NATIVE menuselect.makeopts
   - menuselect/menuselect --enable CORE-SOUNDS-RU-GSM menuselect.makeopts

- name: building asterisk {{ src.version.asterisk }}
  command: "{{ item }} chdir={{ src_dir }}/asterisk-{{ src.version.asterisk }}"
  with_items:
    - make
    - make install
